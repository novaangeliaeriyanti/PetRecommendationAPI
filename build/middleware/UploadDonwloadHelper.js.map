{"version":3,"sources":["../../server/middleware/UploadDonwloadHelper.js"],"names":["uploadDir","process","cwd","uploadSingleFile","req","res","next","options","multiples","keepExtensions","maxFileSize","form","files","fields","onPart","part","filename","match","_handlePart","_error","Error","parse","on","fieldName","value","push","once","file","console","log","fileAttrb","uploadMultipleFile","showProductImage","params","url","config","UPLOAD_DIR","fs","createReadStream","responseNotFound","pipe","writeHead","end"],"mappings":"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","sourcesContent":["import formidable from 'formidable';\nimport fs from 'fs';\nimport config from '../config/config';\n\nconst uploadDir = process.cwd() + '/storages/';\n\nconst uploadSingleFile = async (req, res, next) => {\n    const options = {\n        multiples: false,\n        keepExtensions: true,\n        uploadDir: uploadDir,\n        maxFileSize: 50 * 1024 * 1024, // 5MB\n    }\n    const form = formidable(options);\n    let files = [];\n    let fields = [];\n\n    form.onPart = function (part) {\n\n        if (!part.filename || part.filename.match(/\\.(jpg|jpeg|png)$/i)) {\n            this._handlePart(part);\n        }\n        else {\n            form._error(new Error('File type is not supported'));\n        }\n    }\n\n    form.parse(req)\n        .on('field', (fieldName, value) => {\n            fields.push({ fieldName, value });\n        })\n        .once('file', (fieldName, file) => {\n            files.push({ fieldName, file });\n            //files = { ...{ fieldName, file } }\n        })\n        .once('end', () => {\n            console.log('-> upload done');\n            req.fileAttrb = ({\n                files: files,\n                fields: fields\n            });\n            next();\n        });\n\n\n}\n\nconst uploadMultipleFile = async (req, res, next) => {\n    const options = {\n        multiples: true,\n        keepExtensions: true,\n        uploadDir: uploadDir,\n        maxFileSize: 50 * 1024 * 1024, // 5MB\n    }\n    const form = formidable(options);\n    let files = [];\n    let fields = [];\n\n    // check tiap attribute\n    form.onPart = function (part) {\n\n        if (!part.filename || part.filename.match(/\\.(jpg|jpeg|png)$/i)) {\n            this._handlePart(part);\n        }\n        else {\n            form._error(new Error('File type is not supported'));\n        }\n    }\n\n    form.parse(req)\n        .on('field', (fieldName, value) => {\n            fields.push({ fieldName, value });\n        })\n        .on('file', (fieldName, file) => {\n            files.push({ fieldName, file });\n            //files = { ...{ fieldName, file } }\n        })\n        .once('end', () => {\n            console.log('-> upload done');\n            req.fileAttrb = ({\n                files: files,\n                fields: fields\n            });\n            next();\n        });\n}\n\nconst showProductImage = async (req, res) => {\n    const filename = req.params.filename;\n    const url = `${process.cwd()}/${config.UPLOAD_DIR}/${filename}`;\n    fs.createReadStream(url)\n        .on(\"error\", () => responseNotFound(req, res))\n        .pipe(res);\n}\n\n\nfunction responseNotFound(req, res) {\n    res.writeHead(404, { \"Content-Type\": \"text/plain\" });\n    res.end(\"Not Found\")\n}\n\n\nexport default {\n    uploadSingleFile,\n    showProductImage,\n    uploadMultipleFile\n}"],"file":"UploadDonwloadHelper.js"}