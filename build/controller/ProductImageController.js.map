{"version":3,"sources":["../../server/controller/ProductImageController.js"],"names":["createProductImage","req","res","next","files","fields","fileAttrb","prodId","parseInt","value","prodImage","prim_filename","undefined","prim_filesize","prim_filetype","prim_primary","prim_prod_id","listImages","forEach","el","file","newFilename","size","mimetype","push","result","context","models","products_images","bulkCreate","send","error","status","json","message","findProdImagesById","findAll","where"],"mappings":";;;;;;;AACA,MAAMA,kBAAkB,GAAG,OAAOC,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,KAA0B;AACjD,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAoBJ,GAAG,CAACK,SAA9B;AACA,QAAMC,MAAM,GAAGC,QAAQ,CAACH,MAAM,CAAC,CAAD,CAAN,CAAUI,KAAX,CAAvB;AAEA,MAAIC,SAAS,GAAG;AACZC,IAAAA,aAAa,EAAEC,SADH;AAEZC,IAAAA,aAAa,EAAED,SAFH;AAGZE,IAAAA,aAAa,EAAEF,SAHH;AAIZG,IAAAA,YAAY,EAAE,KAJF;AAKZC,IAAAA,YAAY,EAAEJ;AALF,GAAhB;AAQA,QAAMK,UAAU,GAAG,EAAnB;AAEAb,EAAAA,KAAK,CAACc,OAAN,CAAcC,EAAE,IAAI;AAChBT,IAAAA,SAAS,GAAG;AACRC,MAAAA,aAAa,EAAEQ,EAAE,CAACC,IAAH,CAAQC,WADf;AAERR,MAAAA,aAAa,EAAEM,EAAE,CAACC,IAAH,CAAQE,IAFf;AAGRR,MAAAA,aAAa,EAAEK,EAAE,CAACC,IAAH,CAAQG,QAHf;AAIRR,MAAAA,YAAY,EAAE,KAJN;AAKRC,MAAAA,YAAY,EAAET;AALN,KAAZ;AAOAU,IAAAA,UAAU,CAACO,IAAX,CAAgBd,SAAhB;AACH,GATD,EAdiD,CAyBjD;;AACA,MAAI;AACA,UAAMe,MAAM,GAAG,MAAMxB,GAAG,CAACyB,OAAJ,CAAYC,MAAZ,CAAmBC,eAAnB,CAAmCC,UAAnC,CACjBZ,UADiB,CAArB;AAGAf,IAAAA,GAAG,CAAC4B,IAAJ,CAASL,MAAT;AACH,GALD,CAKE,OAAOM,KAAP,EAAc;AACZ,WAAO7B,GAAG,CAAC8B,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,MAAAA,OAAO,EAAGH,KAAK,CAACG;AAAjB,KAArB,CAAP;AACH;AACJ,CAlCD;;AAqCA,MAAMC,kBAAkB,GAAG,OAAOlC,GAAP,EAAYC,GAAZ,KAAoB;AAC3C,QAAMK,MAAM,GAAGN,GAAG,CAACM,MAAnB;;AACA,MAAI;AACA,UAAMkB,MAAM,GAAG,MAAMxB,GAAG,CAACyB,OAAJ,CAAYC,MAAZ,CAAmBC,eAAnB,CAAmCQ,OAAnC,CACjB;AAAEC,MAAAA,KAAK,EAAE;AAAErB,QAAAA,YAAY,EAAER,QAAQ,CAACD,MAAD;AAAxB;AAAT,KADiB,CAArB;AAGA,WAAOL,GAAG,CAAC4B,IAAJ,CAASL,MAAT,CAAP;AACH,GALD,CAKE,OAAOM,KAAP,EAAc;AACZ,WAAO7B,GAAG,CAAC4B,IAAJ,CAAS,GAAT,EAAcA,IAAd,CAAmBC,KAAnB,CAAP;AACH;AAEJ,CAXD;;eAae;AACXI,EAAAA,kBADW;AAEXnC,EAAAA;AAFW,C","sourcesContent":["\nconst createProductImage = async (req, res, next) => {\n    const { files, fields } = req.fileAttrb;\n    const prodId = parseInt(fields[0].value);\n\n    let prodImage = {\n        prim_filename: undefined,\n        prim_filesize: undefined,\n        prim_filetype: undefined,\n        prim_primary: false,\n        prim_prod_id: undefined\n    }\n\n    const listImages = [];\n\n    files.forEach(el => {\n        prodImage = {\n            prim_filename: el.file.newFilename,\n            prim_filesize: el.file.size,\n            prim_filetype: el.file.mimetype,\n            prim_primary: false,\n            prim_prod_id: prodId\n        }\n        listImages.push(prodImage)\n    });\n\n    //insert into product_images\n    try {\n        const result = await req.context.models.products_images.bulkCreate(\n            listImages\n        );\n        res.send(result);\n    } catch (error) {\n        return res.status(404).json({message : error.message})\n    }\n}\n\n\nconst findProdImagesById = async (req, res) => {\n    const prodId = req.prodId;\n    try {\n        const result = await req.context.models.products_images.findAll(\n            { where: { prim_prod_id: parseInt(prodId) } }\n        );\n        return res.send(result);\n    } catch (error) {\n        return res.send(404).send(error);\n    }\n\n}\n\nexport default {\n    findProdImagesById,\n    createProductImage\n}"],"file":"ProductImageController.js"}